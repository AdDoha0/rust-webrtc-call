import React, { useState, useRef, useEffect } from 'react';
import './WebRTCCall.css';

const WebRTCCall = () => {
  const [localStream, setLocalStream] = useState(null);
  const [remoteStream, setRemoteStream] = useState(null);
  const [isCallActive, setIsCallActive] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [roomId, setRoomId] = useState('');
  const [isInRoom, setIsInRoom] = useState(false);

  const localAudioRef = useRef(null);
  const remoteAudioRef = useRef(null);
  const peerConnectionRef = useRef(null);

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è STUN —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è WebRTC
  const configuration = {
    iceServers: [
      { urls: 'stun:stun.l.google.com:19302' },
      { urls: 'stun:stun1.l.google.com:19302' }
    ]
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
  const initializeLocalStream = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: true, 
        video: false 
      });
      setLocalStream(stream);
      
      if (localAudioRef.current) {
        localAudioRef.current.srcObject = stream;
      }
      
      console.log('–õ–æ–∫–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.');
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
  const joinRoom = async () => {
    if (!roomId.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã');
      return;
    }

    if (!localStream) {
      await initializeLocalStream();
    }

    setIsInRoom(true);
    console.log(`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ: ${roomId}`);
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ–º–Ω–∞—Ç–µ
  };

  // –ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫
  const startCall = () => {
    if (!localStream) {
      alert('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ');
      return;
    }
    setIsCallActive(true);
    console.log('–ó–≤–æ–Ω–æ–∫ –Ω–∞—á–∞—Ç');
  };

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
  const endCall = () => {
    setIsCallActive(false);
    setRemoteStream(null);
    
    if (peerConnectionRef.current) {
      peerConnectionRef.current.close();
      peerConnectionRef.current = null;
    }
    
    console.log('–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω
  const toggleMute = () => {
    if (localStream) {
      const audioTrack = localStream.getAudioTracks()[0];
      if (audioTrack) {
        audioTrack.enabled = !audioTrack.enabled;
        setIsMuted(!isMuted);
      }
    }
  };

  // –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
  const leaveRoom = () => {
    if (isCallActive) {
      endCall();
    }
    
    if (localStream) {
      localStream.getTracks().forEach(track => track.stop());
      setLocalStream(null);
    }
    
    setIsInRoom(false);
    setRoomId('');
    console.log('–ü–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É');
  };

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
      }
      if (peerConnectionRef.current) {
        peerConnectionRef.current.close();
      }
    };
  }, [localStream]);

  return (
    <div className="webrtc-call">
      <div className="call-container">
        <h2>–ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫ WebRTC</h2>
        
        {!isInRoom ? (
          <div className="room-join">
            <div className="input-group">
              <input
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã"
                value={roomId}
                onChange={(e) => setRoomId(e.target.value)}
                className="room-input"
              />
              <button 
                onClick={joinRoom}
                className="join-btn"
              >
                –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
              </button>
            </div>
          </div>
        ) : (
          <div className="call-controls">
            <div className="room-info">
              <p>–ö–æ–º–Ω–∞—Ç–∞: <strong>{roomId}</strong></p>
            </div>
            
            <div className="audio-controls">
              <audio 
                ref={localAudioRef} 
                autoPlay 
                muted 
                className="local-audio"
              />
              {remoteStream && (
                <audio 
                  ref={remoteAudioRef} 
                  autoPlay 
                  className="remote-audio"
                />
              )}
            </div>
            
            <div className="control-buttons">
              {!isCallActive ? (
                <button 
                  onClick={startCall}
                  className="start-call-btn"
                >
                  –ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫
                </button>
              ) : (
                <>
                  <button 
                    onClick={toggleMute}
                    className={`mute-btn ${isMuted ? 'muted' : ''}`}
                  >
                    {isMuted ? 'üîá –í–∫–ª—é—á–∏—Ç—å' : 'üîä –í—ã–∫–ª—é—á–∏—Ç—å'}
                  </button>
                  <button 
                    onClick={endCall}
                    className="end-call-btn"
                  >
                    –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
                  </button>
                </>
              )}
              
              <button 
                onClick={leaveRoom}
                className="leave-room-btn"
              >
                –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
              </button>
            </div>
            
            <div className="status">
              <p>–°—Ç–∞—Ç—É—Å: {isCallActive ? '–í –∑–≤–æ–Ω–∫–µ' : '–í –∫–æ–º–Ω–∞—Ç–µ'}</p>
              <p>–ú–∏–∫—Ä–æ—Ñ–æ–Ω: {isMuted ? '–í—ã–∫–ª—é—á–µ–Ω' : '–í–∫–ª—é—á–µ–Ω'}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default WebRTCCall; 